-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Short description of your package
--   
--   Please see the README on Github at
--   <a>https://github.com/githubuser/LoremIpsum#readme</a>
@package LoremIpsum
@version 0.1.0.0


module Lib
type Key = Char
type Occurences = Map Key Integer
type Letter = Char
type Alphabet = Map Letter Occurences
occurences :: Occurences

-- | Initializes a new (inner) list of Char, Int tuples.
initOccurences :: Occurences

-- | Initializes a new (outer) list of Char, Occurences tuples.
initAlphabet :: Alphabet

-- | Used to get the number of all occurences of an datatype.
frequency :: (Ord a) => [a] -> [(a, Int)]

-- | Used by getCharCountValue to get the number of occurences from a
--   specific character.
lookup :: Char -> [(Char, Int)] -> Int

-- | Returns the number of occurences from a specific character.
getCharCountValue :: Char -> [(Char, Int)] -> Int

-- | Swaps the three values of a tuple of tuples.
swapTupleValues :: ((Char, Char), Int) -> (Char, (Char, Int))

-- | Changes the old list with int occurences to a new list with float
--   percentages (0.0 - 1.0).
changeIntTupleToFloat :: [(Char, Int)] -> (Char, (Char, Int)) -> (Char, (Char, Float))

-- | Counts the occurences of a char value in a string.
countLetters :: String -> Char -> Int

-- | Prints a tuple after the occurence count has been changed to the
--   percentages (0.0 - 1.0).
printFloatTuple :: (Char, (Char, Float)) -> String

-- | Changes the list's structure.
groupTupleLists :: [(Char, (Char, Float))] -> [[(Char, (Char, Float))]]

-- | Each character has it's own <tt>area</tt> between 0.0 and 1.0. This is
--   used to ensure better result from our randomizer.
kummulate :: [(Char, Float)] -> [(Char, Float)]

-- | Returns the sum of both tuple values and another value.
kummulateAddNumber :: (Char, Float) -> Float -> (Char, Float)

-- | Gets the key of a tuple.
getKeyOfTuple :: [(Char, (Char, Float))] -> Char

-- | Gets the inner tuple of a tuple.
getSubTupelOfTuple :: (Char, (Char, Float)) -> (Char, Float)

-- | Changes the list to a list of tuples.
makeListOfTuple :: [(Char, (Char, Float))] -> [(Char, Float)]

-- | Changes the list of tuples a tuples with a list as the second
--   argument.
makeCharTupleListTuple :: [(Char, (Char, Float))] -> (Char, [(Char, Float)])

-- | Used to start the whole process.
openFile :: String -> IO ()

-- | Changes a char to a string.
charToString :: Char -> String

-- | Returns a random Int (1-1000).
getRandomNumberOneTo :: IO Int

-- | Changes the list's structure for further use.
optimizeList :: [[(Char, (Char, Float))]] -> [(Char, [(Char, Float)])]

-- | Generates a text based on random numbers and the occurence values of
--   the characters.
generateText :: String -> Int -> Char -> [(Char, [(Char, Float)])] -> IO ()
